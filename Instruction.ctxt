#BlueJ class context
comment0.target=Instruction
comment0.text=\n\ Instructor\ class\ represents\ an\ instructor\ and\ decode\ the\ instructor\n\n\ @author\ Thuc\ Nhi\ Le\n
comment1.params=b
comment1.target=Instruction(java.lang.Byte)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Intruction\n\ \n\ @param\ \ \ b\ \ \ the\ byte\ representing\ opcode\ of\ the\ instruction\n
comment10.params=arr
comment10.target=void\ decodeBL(java.lang.String[])
comment10.text=\n\ Decode\ the\ BL\ instruction\n\ \n\ @param\ \ \ the\ array\ of\ string\ that\ is\ parsed\ in\ Assembler\n
comment11.params=s\ first\ second
comment11.target=void\ mapping(java.lang.String,\ int,\ int)
comment11.text=\n\ Map\ the\ register\ to\ the\ byte\ represent\ it\ in\ the\ memory\n\ \n\ @param\ \ \ s\ \ \ the\ register\n\ @param\ \ \ first\ \ \ the\ first\ position\n\ @param\ \ \ second\ \ the\ second\ position\n
comment12.params=
comment12.target=void\ initRegisterMap()
comment12.text=\n\ Create\ the\ map\ to\ map\ the\ register\ to\ the\ byte\ representation\n
comment13.params=
comment13.target=void\ initFunctionMap()
comment13.text=\n\ Create\ the\ map\ to\ map\ the\ function\ to\ the\ byte\ representation\n
comment14.params=strNum
comment14.target=boolean\ isNum(java.lang.String)
comment14.text=\n\ Check\ if\ the\ string\ is\ a\ number\ for\ the\ parsing\ process\n\ \n\ @param\ \ \ strNum\ \ the\ string\ to\ check\n\ @return\ \ \ \ \ \ \ \ \ \ whether\ the\ string\ can\ be\ parsed\ into\ integer\ \n
comment15.params=s
comment15.target=void\ setFunction(java.lang.String)
comment15.text=\n\ Set\ the\ func\ value\n\ \n\ @param\ \ \ s\ \ \ the\ string\ to\ set\n
comment16.params=
comment16.target=java.util.ArrayList\ getListReg()
comment16.text=\n\ Return\ the\ register\ list\n\ \n\ @return\ \ the\ register\ list\n
comment2.params=b
comment2.target=void\ decodeOpcode(java.lang.Byte)
comment2.text=\n\ Decode\ the\ opcode\ into\ byte\ type\n\ \n\ @param\ \ \ b\ \ \ the\ byte\ representing\ the\ opcode\n
comment3.params=arr
comment3.target=void\ decodeRegister(java.lang.String[])
comment3.text=\n\ Decode\ the\ register\ and\ the\ immediate\n\ \n\ @param\ \ \ arr\ \ \ \ \ the\ array\ of\ string\ that\ is\ parsed\ in\ Assembler\n
comment4.params=s
comment4.target=void\ setName(java.lang.String)
comment4.text=\n\ Set\ name\ value\n\ \n\ @param\ \ \ s\ \ \ the\ string\ that\ is\ parsed\ from\ the\ Assembler\n
comment5.params=
comment5.target=byte[]\ getByteArr()
comment5.text=\n\ Return\ the\ byte\ array\ of\ wordsize\n\ \n\ @return\ \ the\ byte\ array\n
comment6.params=arr
comment6.target=void\ decodeStackOp(java.lang.String[])
comment6.text=\n\ Decode\ the\ stack\n\ \n\ @param\ \ \ the\ array\ of\ string\ that\ is\ parsed\ in\ Assembler\n
comment7.params=arr
comment7.target=void\ decodeMOV(java.lang.String[])
comment7.text=\n\ Decode\ the\ MOV\ and\ FMOV\ instruction\n\ \n\ @param\ \ \ the\ array\ of\ string\ that\ is\ parsed\ in\ Assembler\n
comment8.params=arr
comment8.target=void\ decodeRDI(java.lang.String[])
comment8.text=\n\ Decode\ the\ R,\ D,\ I\ type\ instructions\n\ \n\ @param\ \ \ the\ array\ of\ string\ that\ is\ parsed\ in\ Assembler\n
comment9.params=arr
comment9.target=void\ decodeCBZ(java.lang.String[])
comment9.text=\n\ Decode\ the\ CBZ\ instruction\n\ \n\ @param\ \ \ the\ array\ of\ string\ that\ is\ parsed\ in\ Assembler\n
numComments=17
