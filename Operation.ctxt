#BlueJ class context
comment0.target=Operation
comment0.text=\n\ Operation\ class\ executes\ the\ instruction\ and\ the\ fetch-execute\ cycle.\n\n\ @author\ Thuc\ Nhi\ Le\n
comment1.params=m\ list1\ list2\ map1\ map2
comment1.target=Operation(Memory,\ java.util.ArrayList,\ java.util.ArrayList,\ java.util.HashMap,\ java.util.HashMap)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Operation\n\ \n\ @param\ \ \ m\ \ \ \ \ \ \ memory\n\ @param\ \ \ list1\ \ \ instrList\n\ @param\ \ \ list2\ \ \ regList\n\ @param\ \ \ map1\ \ \ \ addressMap\n\ @param\ \ \ map2\ \ \ \ reverseAddrMap\n
comment10.params=i
comment10.target=void\ processAND(Instruction)
comment10.text=\n\ Execute\ AND\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n
comment11.params=i\ pc
comment11.target=int\ processBL(Instruction,\ Register)
comment11.text=\n\ Execute\ BL\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n\ @param\ \ \ pc\ \ program\ counter\n
comment12.params=i\ pc
comment12.target=int\ processCBZ(Instruction,\ Register)
comment12.text=\n\ Execute\ CBZ\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n\ @param\ \ \ pc\ \ program\ counter\n
comment13.params=i\ pc
comment13.target=int\ processRET(Instruction,\ Register)
comment13.text=\n\ Execute\ RET\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n\ @param\ \ \ pc\ \ program\ counter\n
comment14.params=num1\ num2
comment14.target=java.lang.String\ addBinary(java.lang.String,\ java.lang.String)
comment14.text=\n\ Add\ Binary\n\ \n\ @param\ \ \ num1\ \ \ \ first\ bin\ string\n\ @param\ \ \ num2\ \ \ \ second\ bin\ string\n\ @return\ \ the\ sum\ in\ binary\n
comment15.params=bin
comment15.target=java.lang.String\ twosCompliment(java.lang.String)
comment15.text=\n\ Find\ the\ 2's\ compliment\ of\ a\ binary\ string\n\ \n\ @param\ \ \ bin\ \ \ \ \ binary\ string\n\ @return\ \ the\ 2's\ compliment\ of\ the\ binary\ string\n
comment16.params=c
comment16.target=char\ flip(char)
comment16.text=\n\ Flip\ the\ number\n\ \n\ @param\ \ \ c\ \ \ the\ char(1/0)\n\ @return\ \ the\ flipped\ char\ (1\ if\ 0,\ 0\ if\ 1);\n
comment2.params=list1\ list2\ map1\ map2
comment2.target=void\ initOp(java.util.ArrayList,\ java.util.ArrayList,\ java.util.HashMap,\ java.util.HashMap)
comment2.text=\n\ Initialize\ the\ lists\ and\ maps\n\ \n\ @param\ \ \ list1\ \ \ instrList\n\ @param\ \ \ list2\ \ \ regList\n\ @param\ \ \ map1\ \ \ \ addressMap\n\ @param\ \ \ map2\ \ \ \ reverseAddrMap\n
comment3.params=flag
comment3.target=void\ process(Flag)
comment3.text=\n\ Process\ the\ instruction\n\ \n\ @param\ \ \ flag\ \ \ \ the\ status\ flag\n
comment4.params=i
comment4.target=void\ processMOV(Instruction)
comment4.text=\n\ Execute\ MOV,\ FMOV\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n
comment5.params=i
comment5.target=void\ processSTP(Instruction)
comment5.text=\n\ Execute\ stack\ push\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n
comment6.params=i
comment6.target=void\ processD(Instruction)
comment6.text=\n\ Execute\ D-type\ instructions\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n
comment7.params=i
comment7.target=void\ processLDP(Instruction)
comment7.text=\n\ Execute\ stack\ pop\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n
comment8.params=i
comment8.target=void\ processADD(Instruction)
comment8.text=\n\ Execute\ ADD,\ ADDI\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n
comment9.params=i
comment9.target=void\ processSUB(Instruction)
comment9.text=\n\ Execute\ SUB\n\ \n\ @param\ \ \ i\ \ \ instruction\ to\ execute\n
numComments=17
